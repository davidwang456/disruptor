#summary An example of a single producer and single consumer
#labels code,article-sc

= Code Example =

The code below is an example of a single producer and single consumer using the convenience interface `BatchHandler` for implementing a consumer.  The consumer runs on a separate thread receiving entries as they become available.

RingBuffer entry for exchange.
{{{
public final class ValueEntry extends AbstractEntry
{
    private long value;

    public long getValue()
    {
        return value;
    }

    public void setValue(final long value)
    {
        this.value = value;
    }

    public final static EntryFactory<ValueEntry> ENTRY_FACTORY = new EntryFactory<ValueEntry>()
    {
        public ValueEntry create()
        {
            return new ValueEntry();
        }
    };
}
}}}

Consumers implement this interface for convenience.
{{{
// Callback handler which can be implemented by consumers
final BatchHandler<ValueEntry> batchHandler = new BatchHandler<ValueEntry>()
{
    public void onAvailable(final ValueEntry entry) throws Exception
    {
        // process a new entry as it becomes available.
    }

    public void onEndOfBatch() throws Exception
    {
        // useful for flushing results to an IO device if necessary.
    }

    public void onCompletion()
    {
        // do any necessary clean up before shutdown
    }
};
}}}

Setup the !RingBuffer and barriers.
{{{
RingBuffer<ValueEntry> ringBuffer =
    new RingBuffer<ValueEntry>(ValueEntry.ENTRY_FACTORY, RING_SIZE,
                               ClaimStrategy.Option.SINGLE_THREADED,
                               WaitStrategy.Option.YIELDING);

ConsumerBarrier<ValueEntry> consumerBarrier = ringBuffer.createConsumerBarrier();       
BatchConsumer<ValueEntry> batchConsumer = new BatchConsumer<ValueEntry>(consumerBarrier, batchHandler);
ProducerBarrier<ValueEntry> producerBarrier = ringBuffer.createProducerBarrier(batchConsumer);   

// Each consumer can run on a separate thread
EXECUTOR.submit(batchConsumer);
}}}

Producer claims entries for exchange with the consumers.
{{{
// Producers claim entries in sequence
ValueEntry entry = producerBarrier.nextEntry();

entry.setValue(1234);

// make the entry available to consumers
producerBarrier.commit(entry);   
}}}