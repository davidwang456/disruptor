#summary An example of a single publisher and single event processor for Disruptor 2.x

= Code Example for Disruptor 2.x =

The code below is an example of a single producer and single consumer using the convenience interface `EventHandler` for implementing a consumer.  The consumer runs on a separate thread receiving entries as they become available.

!RingBuffer events as the item of data exchange.  These event objects as simple or complex as your application needs.
{{{
public final class ValueEvent extends AbstractEvent
{
    private long value;

    public long getValue()
    {
        return value;
    }

    public void setValue(final long value)
    {
        this.value = value;
    }

    public final static EventFactory<ValueEvent> EVENT_FACTORY = new EventFactory<ValueEvent>()
    {
        public ValueEvent create()
        {
            return new ValueEvent();
        }
    };
}
}}}

Event processors implement this interface for convenience.
{{{
final EventHandler<ValueEvent> handler = new EventHandler<ValueEvent>()
{
    public void onEvent(final ValueEvent event, final boolean endOfBatch) throws Exception
    {
        // process a new event.
    }
};
}}}

Setup the !RingBuffer and barriers.
{{{
RingBuffer<ValueEvent> ringBuffer =
    new RingBuffer<ValueEvent>(ValueEntry.EVENT_FACTORY, RING_SIZE,
                               ClaimStrategy.Option.SINGLE_THREADED,
                               WaitStrategy.Option.YIELDING);

DependenceBarrier<ValueEvent barrier = ringBuffer.newDependencyBarrier();       
BatchEventProcessor<ValueEvent> eventProcessor = new BatchEventProcessor<ValueEvent>(barrier, handler);
ringBuffer.setTrackedProcessors(eventProcessor);  

// Each EventProcessor can run on a separate thread
EXECUTOR.submit(eventProcessor);
}}}

For most situations, the DSLWizard can be used to simplify the setup. The equivalent ring buffer and processor setup when using the DSLWizard would be:

{{{
DisruptorWizard<ValueEvent> dw =
  new DisruptorWizard<ValueEvent>(ValueEntry.EVENT_FACTORY, RING_SIZE, EXECUTOR, 
                                       ClaimStrategy.Option.SINGLE_THREADED,
                                       WaitStrategy.Option.YIELDING);
dw.handleEventsWith(handler);
RingBuffer<ValueEvent> ringBuffer = dw.start();
}}}

Publisher claims events in sequence for publishing to !EventProcessors.
{{{
// Publishers claim events in sequence
ValueEvent event = ringBuffer.nextEvent();

event.setValue(1234); // this could be more complex with multiple fields

// make the event available to EventProcessors
ringBuffer.publish(event);   
}}}