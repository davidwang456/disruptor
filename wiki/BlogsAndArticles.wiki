#summary Links to blog posts and articles covering the Disruptor

= How the Disruptor works and how to use it =

[http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-whats-so-special.html What's so special about a ring buffer?] - A summary by Trisha of the data structure at the heart of the Disruptor patter, how it's implemented and what's so great about it.

[http://mechanitis.blogspot.com/2011/06/dissecting-disruptor-how-do-i-read-from.html How do I read from a ring buffer?] - Trisha gives an overview of the `Consumer` and `ConsumerBarrier`, which allows you to read stuff off the ring buffer.

[http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-writing-to-ring.html Writing to the ring buffer] - The third piece from Trisha explaining how to write to the ring buffer, and how it avoids wrapping.

[http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-wiring-up.html Wiring up the dependencies] - Details of how to set up dependencies between multiple consumers.

[http://blog.codeaholics.org/2011/the-disruptor-lock-free-publishing/ Lock-free publishing] - Danny outlines the concepts behind putting items into the ring buffer.

[http://www.symphonious.net/2011/07/11/lmax-disruptor-high-performance-low-latency-and-simple-too/ DSL for wiring up the Disruptor] - Adrian came up with a cunning way to configure your Disruptor

= Why the Disruptor is so fast =

[http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html Locks Are Bad] - Trisha gives some basic concurrency background and explains why locks are evil.

[http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast_22.html Magic cache line padding] - An explanation around why the odd cache line padding variables are required, by Trisha.